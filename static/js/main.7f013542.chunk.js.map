{"version":3,"sources":["components/card-list/carta/carta.jsx","components/card-list/cardList.jsx","components/searchbox/searchbox.jsx","pages/home/home.jsx","App.js","serviceWorker.js","index.js"],"names":["Tarjeta","props","className","src","person","id","alt","name","username","email","CardList","people","map","key","SearchBox","placeholder","handleChange","type","onChange","Home","state","search","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","event","target","value","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sTAiBeA,G,MAdC,SAAAC,GACZ,OACI,yBAAKC,UAAU,6BACX,yBAAKA,UAAU,qBACf,yBAAKA,UAAU,iBAAgBC,IAAG,uCAAkCF,EAAMG,OAAOC,GAA/C,cAA+DC,IAAI,KACrG,wBAAIJ,UAAU,eAAeD,EAAMG,OAAOG,MAC1C,wBAAIL,UAAU,eAAeD,EAAMG,OAAOI,UAClD,wBAAIN,UAAU,eAAeD,EAAMG,OAAOK,WCO/BC,EAVE,SAAAT,GACb,OACI,yBAAKC,UAAU,iBAERD,EAAMU,OAAOC,KAAI,SAAAR,GAAM,OAAI,kBAAC,EAAD,CAASS,IAAKT,EAAOC,GAAID,OAAQA,SCM5DU,G,MAdG,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,YAAaC,EAAgB,EAAhBA,aAC7B,OACI,6BACI,2BACAd,UAAU,oBACVe,KAAK,SACLF,YAAeA,EACfG,SAAUF,OCuDPG,E,kDAxDX,aAAc,IAAD,8BACT,gBAEKC,MAAQ,CACTT,OAAQ,GAORU,OAAO,IAXF,E,gEAiBO,IAAD,OACfC,MAAM,8CAA8CC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC7EF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAAChB,OAAOe,S,+BAGhC,IAAD,SAIqBE,KAAKR,MAAvBT,EAJH,EAIGA,OAAQU,EAJX,EAIWA,OACTQ,EAAmBlB,EAAOmB,QAAO,SAAA1B,GAAM,OACzCA,EAAOG,KAAKwB,cAAcC,SAASX,EAAOU,kBAG9C,OACI,yBAAK7B,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,OACX,wBAAIA,UAAU,eAAd,aACA,6BAEA,kBAAC,EAAD,CAEIa,YAAY,oBACZC,aAAgB,SAAAiB,GAAK,OAAI,EAAKN,SAAS,CAACN,OAAOY,EAAMC,OAAOC,WAKhE,kBAAC,EAAD,CAAUxB,OAAQkB,W,GA/CvBO,IAAMC,WCQVC,EARH,WACV,OACE,6BACE,kBAAC,EAAD,QCCcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7f013542.chunk.js","sourcesContent":["import React from 'react';\nimport './carta.css';\n\nconst Tarjeta = props =>{\n    return(\n        <div className=\"col-md-3 mb-3 text-center\">\n            <div className=\"container tarjeta\">\n            <img className='img-fluid mb-3'src={`https://robohash.org/monster/${props.person.id}/?set=set2`} alt=\"\"/>\n            <h2 className=\"text-center\">{props.person.name}</h2>\n            <h5 className=\"text-center\">{props.person.username}</h5>\n    <h5 className=\"text-center\">{props.person.email}</h5>\n            \n            </div>\n        </div>\n    )\n}\n\nexport default Tarjeta;","import React from 'react';\n\n//componetns\n\nimport Tarjeta from './carta/carta';\n\n\nconst CardList = props =>{\n    return(\n        <div className=\"Card-List row\">\n            {\n               props.people.map(person => <Tarjeta key={person.id} person={person}></Tarjeta>) \n            }\n        </div>\n    )\n}\n\nexport default CardList;","import React from 'react';\nimport './searchbox.css';\n\nconst SearchBox = ({placeholder, handleChange})=>{\n    return(\n        <div>\n            <input   \n            className=\"form-control mb-3\"         \n            type=\"search\"\n            placeholder = {placeholder}\n            onChange={handleChange} \n            />\n        </div>\n    )\n}\n\n\nexport default SearchBox;","import React from 'react';\n\n//components\n\nimport CardList from '../../components/card-list/cardList';\nimport SearchBox from '../../components/searchbox/searchbox';\n\n\nclass Home extends React.Component{\n    constructor(){\n        super()\n\n        this.state = {\n            people: [\n                // {id:1,name:'Rogelio', lastname: 'Gomez'},\n                // {id:2,name:'Elizabeth', lastname: 'Aguilar'},\n                // {id:3,name:'Brenda', lastname:'Gomez'},\n                // {id:4,name:'Debora', lastname:'Cruz'}\n            ],\n\n            search:'',\n        }\n\n    }\n\n\n    componentDidMount(){\n        fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json())\n        .then(users => this.setState({people:users}))\n    }\n\n    render(){\n       \n        //destructuring\n\n        const {people, search} = this.state;\n        const filteredMonsters = people.filter(person =>\n            person.name.toLowerCase().includes(search.toLowerCase())\n                )\n\n        return(\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <h2 className=\"text-center\">Home Page</h2>\n                        <hr/>\n                        \n                        <SearchBox\n                        \n                            placeholder=\"Buscar por nombre\"\n                            handleChange = {event => this.setState({search:event.target.value})}\n\n                        \n                        />\n\n                        <CardList people={filteredMonsters}></CardList>\n\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\n\nexport default Home;","import React from 'react';\nimport './App.css';\n\n//components\n\nimport Home from './pages/home/home';\n\n\nconst App = ()=>{\n  return(\n    <div>\n      <Home></Home>\n    </div>\n  )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}